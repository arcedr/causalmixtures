#' @examples
SingVarRiskSummaries.CMA <-function(BKMRfits,
e.y = NULL, e.y.names = NULL,
which.z = 1:ncol(BKMRfits$Z),
z.names = colnames(BKMRfits$Z),
qs.diff = c(0.25, 0.75),
q.fixed = c(0.25, 0.50, 0.75),
alpha = 0.05, sel, seed = 122) {
Z = BKMRfits$Z
if(is.null(z.names)) z.names <- paste0("z", 1:ncol(Z))
if (!is.null(e.y.names)){
Z = Z[,-which(e.y.names == colnames(Z))]
which.z = 1:ncol(Z)
z.names = colnames(Z)
}
df <- tibble::tibble()
for(i in seq_along(q.fixed)) {
for(j in seq_along(which.z)) {
risk = VarRiskSummary.CMA(whichz = which.z[j],
BKMRfits = BKMRfits,
e.y = e.y, e.y.names = e.y.names,
qs.diff = qs.diff, q.fixed = q.fixed[i],
alpha = alpha, sel = sel, seed = seed)
df0 <- tibble::tibble(q.fixed = q.fixed[i],
variable = z.names[which.z[j]],
est = risk["est"],
sd = risk["sd"])
df <- dplyr::bind_rows(df, df0)
}
}
df$variable <- factor(df$variable, levels = z.names[which.z])
df$q.fixed = as.factor(df$q.fixed)
attr(df, "qs.diff") <- qs.diff
return(df)
}
CDEriskSummary90 = CDERiskSummaries.CMA(fit.y = fit.y, e.y = e.y90, e.y.name = "E.Y", m.name = "m", sel = sel)
# single variable total effects
risks.singvar10 = SingVarRiskSummaries.CMA(BKMRfits = fit.y.TE,
e.y=e.y10, e.y.names="E.Y",
sel=sel)
BKMRfits = fit.y.TE
e.y.names="E.Y"
e.y90,
e.y
Z = BKMRfits$Z
if(is.null(z.names)) z.names <- paste0("z", 1:ncol(Z))
if (!is.null(e.y.names)){
Z = Z[,-which(e.y.names == colnames(Z))]
which.z = 1:ncol(Z)
z.names = colnames(Z)
}
Z
df <- tibble::tibble()
for(i in seq_along(q.fixed)) {
for(j in seq_along(which.z)) {
risk = VarRiskSummary.CMA(whichz = which.z[j],
BKMRfits = BKMRfits,
e.y = e.y, e.y.names = e.y.names,
qs.diff = qs.diff, q.fixed = q.fixed[i],
alpha = alpha, sel = sel, seed = seed)
df0 <- tibble::tibble(q.fixed = q.fixed[i],
variable = z.names[which.z[j]],
est = risk["est"],
sd = risk["sd"])
df <- dplyr::bind_rows(df, df0)
}
}
risk
df
df$variable <- factor(df$variable, levels = z.names[which.z])
q.fixed
seq_along(q.fixed)
which.z
df <- tibble::tibble()
df
for(i in seq_along(q.fixed)) {
for(j in seq_along(which.z)) {
risk = VarRiskSummary.CMA(whichz = which.z[j],
BKMRfits = BKMRfits,
e.y = e.y, e.y.names = e.y.names,
qs.diff = qs.diff, q.fixed = q.fixed[i],
alpha = alpha, sel = sel, seed = seed)
df0 <- tibble::tibble(q.fixed = q.fixed[i],
variable = z.names[which.z[j]],
est = risk["est"],
sd = risk["sd"])
df <- dplyr::bind_rows(df, df0)
}
}
warnings()
seq_along(which.z)
which.z
df
z.names
which.z
z.names[which.z]
z.names
z.names = colnames(Z)
z.names
Z = BKMRfits$Z
Z
Z.Y
head(Z.Y)
df$q.fixed
df
df <- tibble::tibble()
for(i in seq_along(q.fixed)) {
for(j in seq_along(which.z)) {
risk = VarRiskSummary.CMA(whichz = which.z[j],
BKMRfits = BKMRfits,
e.y = e.y, e.y.names = e.y.names,
qs.diff = qs.diff, q.fixed = q.fixed[i],
alpha = alpha, sel = sel, seed = seed)
df0 <- tibble::tibble(q.fixed = q.fixed[i],
variable = z.names[which.z[j]],
est = risk["est"],
sd = risk["sd"])
df <- dplyr::bind_rows(df, df0)
}
}
df
z.names
colnames(Z)
A <- cbind(dat$z1, dat$z2, dat$z3)%>% as.data.frame()
library(dplyr)
A <- cbind(dat$z1, dat$z2, dat$z3)%>% as.data.frame()
X <- cbind(dat$x3)
y  <- dat$y
m  <- dat$M
E.M <- NULL
E.Y <- dat$x2
Z.M <- cbind(A,E.M)
Z.Y <- cbind(A, E.Y)
Z.M <- cbind(A,E.M)
# single variable total effects
risks.singvar10 = SingVarRiskSummaries.CMA(BKMRfits = fit.y.TE,
sel=sel)
# single variable total effects
risks.singvar10 = SingVarRiskSummaries.CMA(BKMRfits = fit.y.TE,
sel=sel)
# single variable total effects
risks.singvar10 = SingVarRiskSummaries.CMA(BKMRfits = fit.y.TE,
e.y=NULL,
sel=sel)
riskSummary10 = TERiskSummaries.CMA(fit.TE = fit.y.TE, e.y=e.y10, e.y.name = "E.Y", sel=sel)
riskSummary10 = TERiskSummaries.CMA(fit.TE = fit.y.TE, e.y=e.y10, e.y.name = "E.Y", sel=sel)
ggplot(riskSummary10,
aes(quantile,
est,
ymin = est - 1.96 * sd,
ymax = est + 1.96 * sd)) +
geom_pointrange()
riskSummary10
riskSummary10
riskSummary10 = TERiskSummaries.CMA(fit.TE = fit.y.TE, e.y=e.y10, e.y.name = "E.Y", sel=sel)
riskSummary10 = TERiskSummaries.CMA(fit.TE = fit.y.TE, e.y=e.y10, e.y.name = "E.Y", sel=sel)
riskSummary10
fit.TE = fit.y.TE
toreturn <- data.frame(quantile=qs,
est=rep(NA,times=length(qs)),
sd=rep(NA,times=length(qs)))
fit <- fit.TE
Z <- fit$Z
if (!is.null(e.y.names)){
Z = Z[,-which(e.y.names == colnames(Z))]
}
Z
X <- fit$X
X.predict <- matrix(colMeans(X),nrow=1)
for(i in 1:length(qs)){
quant <- qs[i]
astar <- apply(Z, 2, quantile, q.fixed)
a <- apply(Z, 2, quantile, quant)
preds = TE.bkmr(a=a, astar=astar, e.y=e.y, fit.y.TE=fit.TE,
X.predict.Y=X.predict, alpha = alpha, sel=sel, seed=seed)
toreturn[i, c(2,3)] = c(preds$est["mean"], preds$est["sd"])
}
preds
toreturn
preds$est
preds$est[,"mean"]
#' @param e.y
#' @param e.y.names
#' @param qs
#' @param q.fixed
#' @param alpha
#' @param sel
#' @param seed
#'
#' @return
#' @export
TERiskSummaries.CMA <- function(fit.TE,
e.y=NULL, e.y.names=NULL,
qs = seq(0.25, 0.75, by = 0.05), q.fixed = 0.5,
alpha = 0.05, sel, seed = 122) {
toreturn <- data.frame(quantile=qs,
est=rep(NA,times=length(qs)),
sd=rep(NA,times=length(qs)))
fit <- fit.TE
Z <- fit$Z
if (!is.null(e.y.names)){
Z = Z[,-which(e.y.names == colnames(Z))]
}
X <- fit$X
X.predict <- matrix(colMeans(X),nrow=1)
for(i in 1:length(qs)){
quant <- qs[i]
astar <- apply(Z, 2, quantile, q.fixed)
a <- apply(Z, 2, quantile, quant)
preds = TE.bkmr(a=a, astar=astar, e.y=e.y, fit.y.TE=fit.TE,
X.predict.Y=X.predict, alpha = alpha, sel=sel, seed=seed)
toreturn[i, c(2,3)] = c(preds$est[,"mean"], preds$est[,"sd"])
}
return(toreturn)
}
riskSummary10 = TERiskSummaries.CMA(fit.TE = fit.y.TE, e.y=e.y10, e.y.name = "E.Y", sel=sel)
riskSummary10
ggplot(riskSummary10,
aes(quantile,
est,
ymin = est - 1.96 * sd,
ymax = est + 1.96 * sd)) +
geom_pointrange()
riskSummary90 = TERiskSummaries.CMA(fit.TE = fit.y.TE, e.y=e.y90, e.y.name = "E.Y", sel=sel)
ggplot(riskSummary90,
aes(quantile,
est,
ymin = est - 1.96 * sd,
ymax = est + 1.96 * sd)) +
geom_pointrange()
library(BKMRCMA)
setwd("/Users/zilanchai/Library/Mobile Documents/com~apple~CloudDocs/Docs/Dissertation/BKMRCMA/LiuPapersupplementary/code/data_analysis/data")
data <- read.csv("data_standardized.csv")
glimpse(data)
colnames(data)
hist(data$as_ln)
summary(data)
newnames = c("age_visit", "sex", "gest_weeks", "deliv_type", "birth_order", "drinkwater_cups", "hosp_child_yn", "pica_yn", "education", "educa_spouse", "smokenv", "home_emo", "home_avoid", "home_careg", "home_env"," home_play", "home_stim"," energy", "pb_ln_2", "mn_ln_2", "as_ln_2")
paste0("CDE",1:21)
oldnames = paste0("X",1:21)
newnames = c("age_visit", "sex", "gest_weeks", "deliv_type", "birth_order", "drinkwater_cups", "hosp_child_yn", "pica_yn", "education", "educa_spouse", "smokenv", "home_emo", "home_avoid", "home_careg", "home_env"," home_play", "home_stim"," energy", "pb_ln_2", "mn_ln_2", "as_ln_2")
df = data %>% rename_at(vars(oldnames), ~ newnames)
df = data %>% rename_with(~ newnames[which(oldnames == .x)], .cols = oldnames)
head(df)
sapply(data, sum)
sapply(data, var)
sapply(data, sd)
sapply(data, mean)
sapply(data, var)
colnames(data)
colnames(df)
hist(df$Y)
hist(df$y)
hist(df$gest_weeks)
hist(df$sex)
hist(df$age_visit)
hist(df$education)
sapply(data, var)
sapply(df, var)
sapply(df, var)
sapply(df, mean)
sapply(df, var)
sapply(df, sd)
hist(df$smokenv)
A <- cbind(df$as_ln, df$pb_ln, df$mn_ln)
A <- cbind(df$as_ln, df$pb_ln, df$mn_ln)
X <- X <- cbind(df$sex, df$age_visit, df$education, df$smokenv, df$as_ln_2, df$mn_ln_2, df$pb_ln_2)
y  <- df$y
m  <- df$gest_weeks
E.M <- NULL
Z.M <- cbind(A,E.M)
Z.Y <- cbind(A, E.Y)
Zm.Y <- cbind(Z.Y, m)
set.seed(1)
fit.y <- kmbayes(y=y, Z=Zm.Y, X=X, iter=200, verbose=TRUE, varsel=FALSE)
fit.y <- kmbayes(y=y, Z=Zm.Y, X=X, iter=200, verbose=TRUE, varsel=FALSE)
set.seed(2)
fit.y.TE <- kmbayes(y=y, Z=Z.Y, X=X, iter=200, verbose=TRUE, varsel=FALSE)
#save(fit.y,file="bkmr_y.RData"
save(fit.y,file="bkmr_y.RData")
fit.m <- kmbayes(y=m, Z=Z.M, X=X, iter=200, verbose=TRUE, varsel=FALSE)
A <- cbind(df$as_ln, df$pb_ln, df$mn_ln)
X <-  cbind(df$sex, df$education, df$smokenv, df$as_ln_2, df$mn_ln_2, df$pb_ln_2)
y  <- df$y
m  <- df$gest_weeks
E.M <- NULL
E.Y <-  df$age_visit,
E.Y <-  df$age_visit
Z.M <- cbind(A,E.M)
Z.Y <- cbind(A, E.Y)
Zm.Y <- cbind(Z.Y, m)
A <- cbind(df$as_ln, df$mn_ln, df$pb_ln)
Z.M <- cbind(A,E.M)
Z.Y <- cbind(A, E.Y)
Zm.Y <- cbind(Z.Y, m)
colnames(Z.M)  <- colnames(A)  <- c("As","Mn","Pb")
colnames(Z.Y)  <- c("As","Mn","Pb","age")
colnames(Zm.Y) <- c("As","Mn","Pb","age","gest_weeks")
A <- cbind(df$as_ln, df$mn_ln, df$pb_ln)
X <-  cbind(df$sex, df$education, df$smokenv, df$as_ln_2, df$mn_ln_2, df$pb_ln_2)
y  <- df$y
m  <- df$gest_weeks
E.M <- NULL
E.Y <-  df$age_visit
Z.M <- cbind(A,E.M)
Z.Y <- cbind(A, E.Y)
Zm.Y <- cbind(Z.Y, m)
colnames(Z.M)  <- colnames(A)  <- c("As","Mn","Pb")
colnames(Z.Y)  <- c("As","Mn","Pb","age")
colnames(Zm.Y) <- c("As","Mn","Pb","age","gest_weeks")
set.seed(1)
fit.y <- kmbayes(y=y, Z=Zm.Y, X=X, iter=20, verbose=TRUE, varsel=FALSE)
fit.y.TE <- kmbayes(y=y, Z=Z.Y, X=X, iter=20, verbose=TRUE, varsel=FALSE)
fit.m <- kmbayes(y=m, Z=Z.M, X=X, iter=20000, verbose=TRUE, varsel=FALSE)
fit.m <- kmbayes(y=m, Z=Z.M, X=X, iter=20, verbose=TRUE, varsel=FALSE)
set.seed(1)
fit.y <- kmbayes(y=y, Z=Zm.Y, X=X, iter=20000, verbose=TRUE, varsel=FALSE)
save(fit.y,file="bkmr_y.RData")
set.seed(2)
fit.y.TE <- kmbayes(y=y, Z=Z.Y, X=X, iter=20000, verbose=TRUE, varsel=FALSE)
save(fit.y.TE,file="bkmr_y_TE.RData")
set.seed(3)
fit.m <- kmbayes(y=m, Z=Z.M, X=X, iter=20000, verbose=TRUE, varsel=FALSE)
save(fit.m,file="bkmr_m.RData")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(haven)
library(dplyr)
library(corrplot)
library(mice)
library(pastecs)
library(bkmr)
library(knitr)
setwd("/Users/zilanchai/Library/Mobile Documents/com~apple~CloudDocs/Docs/Dissertation/BKMRCMA/LiuPapersupplementary/code/data_analysis/data")
data <- read.csv("data_standardized.csv")
md.pattern(data)
rm（list = ls（））
rm(list =ls())
setwd("/Users/zilanchai/Library/Mobile Documents/com~apple~CloudDocs/Docs/Dissertation/BKMRCMA/LiuPapersupplementary/code/data_analysis/data")
data <- read.csv("data_standardized.csv")
dim(data)
colnames(data)
oldnames = paste0("X",1:21)
newnames = c("age_visit", "sex", "gest_weeks", "deliv_type", "birth_order", "drinkwater_cups", "hosp_child_yn", "pica_yn", "education", "educa_spouse", "smokenv", "home_emo", "home_avoid", "home_careg", "home_env"," home_play", "home_stim"," energy", "pb_ln_2", "mn_ln_2", "as_ln_2")
df = data %>% rename_with(~ newnames[which(oldnames == .x)], .cols = oldnames)
colnames(df)
sapply(df, mean)
sapply(df, sd)
A <- cbind(df$as_ln, df$mn_ln, df$pb_ln)
X <-  cbind(df$sex, df$education, df$smokenv, df$as_ln_2, df$mn_ln_2, df$pb_ln_2)
y  <- df$y
m  <- df$gest_weeks
E.M <- NULL
E.Y <-  df$age_visit
Z.M <- cbind(A,E.M)
Z.Y <- cbind(A, E.Y)
Zm.Y <- cbind(Z.Y, m)
colnames(Z.M)  <- colnames(A)  <- c("As","Mn","Pb")
colnames(Z.Y)  <- c("As","Mn","Pb","age")
colnames(Zm.Y) <- c("As","Mn","Pb","age","gest_weeks")
##### load models
load("bkmr_y.RData")
load("bkmr_y_TE.RData")
load("bkmr_m.RData")
astar.age10 <- c(apply(A, 2, quantile, probs=0.25), quantile(E.Y, probs=0.1))
astar.age90 <- c(apply(A, 2, quantile, probs=0.25), quantile(E.Y, probs=0.9))
a.age10 <- c(apply(A, 2, quantile, probs=0.75), quantile(E.Y, probs=0.1))
a.age90 <- c(apply(A, 2, quantile, probs=0.75), quantile(E.Y, probs=0.9))
## the index of the MCMC iterations to be used for inference
sel<-seq(5001,20000,by=15)
## the index of the MCMC iterations to be used for inference
sel<-seq(5001,20000,by=15)
ls()
library(BKMRCMA)
TE.age10 <- TE.bkmr(a=a, astar=astar, e.y=e.y10, fit.y.TE=fit.y.TE, X.predict.Y=X.predict, alpha = 0.01, sel=sel, seed=122)
astar       <-   apply(A, 2, quantile, probs=0.25)
a       <-   apply(A, 2, quantile, probs=0.75)
e.y10 = quantile(E.Y, probs=0.1)
e.y90 = quantile(E.Y, probs=0.9)
TE.age10 <- TE.bkmr(a=a, astar=astar, e.y=e.y10, fit.y.TE=fit.y.TE, X.predict.Y=X.predict, alpha = 0.01, sel=sel, seed=122)
## mean level of confounders
X.predict <- matrix(colMeans(X),nrow=1)
TE.age10 <- TE.bkmr(a=a, astar=astar, e.y=e.y10, fit.y.TE=fit.y.TE, X.predict.Y=X.predict, alpha = 0.01, sel=sel, seed=122)
TE.age10$est
save(TE.age10, TE.age90, file="../Effect/TE_example.RData")
TE.age90 <- TE.bkmr(a=a, astar=astar, e.y=e.y90, fit.y.TE=fit.y.TE, X.predict=X.predict, sel=sel, seed=122)
save(TE.age10, TE.age90, file="../Effect/TE_example.RData")
## look at the posterior mean, median, and 95% CI for TE
TE.age90$est
## look at the posterior mean, median, and 95% CI for TE
TE.age10$est
save(TE.age10, TE.age90, file="../Effect/TE_example.RData")
save(TE.age10, TE.age90, file="/Effect/TE_example.RData")
getwd()
save(TE.age10, TE.age90, file="~/Effect/TE_example.RData")
save(TE.age10, TE.age90, file="TE_example.RData")
## estimate the CDE for a change in the exposures from astar to a,
## fixing the mediator at its 10th, 50th, and 75th percentile and
## age at testing at its 10th percentile
CDE.age10 <- CDE.bkmr(a=a, astar=astar, e.y=e.y10, m.quant=c(0.1,0.5,0.75), fit.y=fit.y, sel=sel, seed=122)
## look at the posterior mean, median, and 95% CI for the CDEs
CDE.age10$est
plotdf <- as.data.frame(CDE.ey10$est)
plotdf["Effect"] <- rownames(plotdf)
## look at the posterior mean, median, and 95% CI for the CDEs
CDE.age10$est
plotdf <- as.data.frame(CDE.ey10$est)
plotdf <- as.data.frame(CDE.age10$est)
plotdf["Effect"] <- rownames(plotdf)
ggplot(plotdf, aes(Effect, mean, ymin = lower, ymax = upper ))  +
geom_pointrange(position = position_dodge(width = 0.75))  +  coord_flip()
mediationeffects.age10 <- mediation.bkmr(a=a, astar=astar, e.y=e.y10, fit.m=fit.m, fit.y=fit.y, fit.y.TE=fit.y.TE,
X.predict.M=X.predict, X.predict.Y=X.predict, sel=sel, seed=122, K=10)
## look at the posterior mean, median, and 95% CI for the TE, NDE, and NIE
mediationeffects.age90$est
## look at the posterior mean, median, and 95% CI for the TE, NDE, and NIE
mediationeffects.age10$est
plotdf <- as.data.frame(mediationeffects.ey10$est)
plotdf <- as.data.frame(mediationeffects.age10$est)
plotdf["Effect"] <- rownames(plotdf)
ggplot(plotdf, aes(Effect, mean, ymin = lower, ymax = upper ))  +
geom_pointrange(position = position_dodge(width = 0.75))  +  coord_flip()
setwd("/Users/zilanchai/Library/Mobile Documents/com~apple~CloudDocs/Docs/Dissertation/BKMRCMA/BKMRCMA package/bkmr_MI-master")
load("BKMRfits_MI_500.RData")
rm(list = ls())
load("BKMRfits_MI_500.RData")
class(BKMRfits500)
class(BKMRfits500[1])
BKMRfits500[1]
length(BKMRfits500[1])
length(BKMRfits500)
tmp = BKMRfits500[1]
tmp
tmp$X
tmp$fit
tmp = BKMRfits500[1]
length(tmp)
length(tmp[1])
BKMRfits[[1]]
BKMRfits500[[1]]
BKMRfits500[1
BKMRfits500[1]
BKMRfits500[1]
tmp = BKMRfits500[[1]]
tmp$iter
length(tmp)
source("bkmr_MI_source.R")
library(bkmr)
library(dplyr)
library(magrittr)
library(ggplot2)
tmp$Z
dim(tmp$Z)
dim(tmp$X)
## fit new OverallRiskSummaries function with our MI BKMR fits using approx method
overallrisks.MI <- OverallRiskSummaries.MI(BKMRfits=BKMRfits500, qs = seq(0.1, 0.9, by = 0.05), q.fixed = 0.5, sel = sel.MI, method="approx")
## if the models were fit for 10,000 iterations this would be
sel.MI <- seq(5001,10000, by = 5)
length(sel.MI) ## double check that this is the correct length (e.g. = 1000)
## fit new OverallRiskSummaries function with our MI BKMR fits using approx method
overallrisks.MI <- OverallRiskSummaries.MI(BKMRfits=BKMRfits500, qs = seq(0.1, 0.9, by = 0.05), q.fixed = 0.5, sel = sel.MI, method="approx")
## rerun the OverallRiskSummaries function but now FIXING the quantile for z2 to 0.25 (for all comparisons)
## NOTE: you can fix one or more elements of the mixture, but the quantile you are fixing them to needs to be the same (q.alwaysfixed)
overallrisks.MI.fixed <- OverallRiskSummaries.MI(BKMRfits=BKMRfits500, qs = seq(0.1, 0.9, by = 0.05), q.fixed = 0.75, q.alwaysfixed = 0.25, index.alwaysfixed = 2, sel = sel.MI, method="approx")
x1 = c(0.1, 0.3)
w1 = c(0.3, 0.5)
x1* w1
x1 = c(0.1, 0.3)
w1 = c(0.3, 0.5)
b1  = 0.5
sum(x1 * w1, b1)
nn = function(x, w, b){
s = sum(x1 * w1, b1)
t = 1/(exp(-s))
return(t)
}
nn(x1,w1, b1)
nn = function(x, w, b){
s = sum(x1 * w1, b1)
t = 1/(1+ exp(-s))
return(t)
}
nn(x1,w1, b1)
nn(c(0.2, 0.4), c(0.3, 0.5), 0.5)
nn(c(0.2, 0.4), c(0.3, 0.5), 0.5)
nn(c(0.5, 0.4), c(0.3, 0.5), 0.5)
nn(c(0111.5, 0.4), c(0.3, 0.5), 0.5)
rm(list = ls())
nn = function(x, w, b){
s = sum(x * w, b)
t = 1/(1+ exp(-s))
return(t)
}
nn(x1,w1, b1)
nn(c(0.2, 0.4), c(0.3, 0.5), 0.5)
nn = function(x, w, b){
s = sum(x * w, b)
t = 1/(1+ exp(-s))
return(t)
}
nn(c(0.2, 0.4), c(0.3, 0.5), 0.5)
nn(c(0.66, 0.68), c(0.5, 0.7), 0.5)
rm(list = ls())
nn = function(x, w, b){
s = sum(x * w, b)
t = 1/(1+ exp(-s))
return(t)
}
sum(c(3, 4, 9)*c(0.3, 0.4, 0.2))
sum(c(3, 4, 9)*c(0.4, 0.2, 0.5))
nn(c(4.3, 6.5), c(.1, .1), 0)
